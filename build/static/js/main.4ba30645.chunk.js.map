{"version":3,"sources":["../source/src/components/ToDoList.js","../source/src/App.js","../source/src/serviceWorker.js","../source/src/index.js"],"names":["ToDoList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","userInput","list","input","setState","console","log","listArray","push","_this2","react_default","a","createElement","className","onChange","e","target","value","changeUserInput","type","onClick","addToList","map","item","React","Component","App","ToDoList_ToDoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAEqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,UAAW,GACXC,KAAM,IALST,+EASHU,GACdP,KAAKQ,SAAS,CACZH,UAAWE,GACV,kBAAME,QAAQC,IAAIH,uCAGbA,GACR,IAAII,EAAYX,KAAKI,MAAME,KAE3BK,EAAUC,KAAKL,GAEfP,KAAKQ,SAAS,CACZF,KAAMK,EACNN,UAAW,sCAIN,IAAAQ,EAAAb,KACP,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,SAAOE,SAAU,SAACC,GAChBV,QAAQC,IAAIS,EAAEC,OAAOC,OACrBR,EAAKS,gBAAgBH,EAAEC,OAAOC,QAE9BA,MAAOrB,KAAKI,MAAMC,UAAWkB,KAAK,SACpCT,EAAAC,EAAAC,cAAA,UAAQQ,QAAS,kBAAMX,EAAKY,UAAUZ,EAAKT,MAAMC,aAAjD,YAEAS,EAAAC,EAAAC,cAAA,UACGhB,KAAKI,MAAME,KAAKoB,IAAI,SAACC,GACpB,OAAOb,EAAAC,EAAAC,cAAA,UAAKW,cAvCcC,IAAMC,WCU7BC,MARf,WACE,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACe,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4ba30645.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class ToDoList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userInput: '',\r\n      list: []\r\n    }\r\n  }\r\n\r\n  changeUserInput(input) {\r\n    this.setState({\r\n      userInput: input\r\n    }, () => console.log(input))\r\n  }\r\n\r\n  addToList(input) {\r\n    let listArray = this.state.list;\r\n\r\n    listArray.push(input);\r\n\r\n    this.setState({\r\n      list: listArray,\r\n      userInput: ''\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"to-do-list-main\">\r\n        <input onChange={(e) => {\r\n          console.log(e.target.value);\r\n          this.changeUserInput(e.target.value);\r\n        }\r\n        } value={this.state.userInput} type=\"text\"></input>\r\n        <button onClick={() => this.addToList(this.state.userInput)}>Press Me</button>\r\n\r\n        <ul>\r\n          {this.state.list.map((item) => {\r\n            return <li>{item}</li>\r\n          })}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}","import React from 'react';\nimport './App.css';\nimport ToDoList from './components/ToDoList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}